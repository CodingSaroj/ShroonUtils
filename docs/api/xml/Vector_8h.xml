<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="Vector_8h" kind="file" language="C++">
    <compoundname>Vector.h</compoundname>
    <includes refid="Common_8h" local="yes">Common.h</includes>
    <includedby refid="Hashmap_8h" local="yes">include/Shroon/Utils/Hashmap.h</includedby>
    <includedby refid="Hashset_8h" local="yes">include/Shroon/Utils/Hashset.h</includedby>
    <includedby refid="String_8h" local="yes">include/Shroon/Utils/String.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>ErrorHandler.h</label>
        <link refid="ErrorHandler_8h"/>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="2">
        <label>Common.h</label>
        <link refid="Common_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/Shroon/Utils/Vector.h</label>
        <link refid="Vector_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/Shroon/Utils/Hashmap.h</label>
        <link refid="Hashmap_8h"/>
      </node>
      <node id="4">
        <label>include/Shroon/Utils/String.h</label>
        <link refid="String_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/Shroon/Utils/Vector.h</label>
        <link refid="Vector_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/Shroon/Utils/HashUtils.h</label>
        <link refid="HashUtils_8h"/>
      </node>
      <node id="3">
        <label>include/Shroon/Utils/Hashset.h</label>
        <link refid="Hashset_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" prot="public" static="no">
        <name>SUTLVectorSize</name>
        <param><defname>v</defname></param>
        <initializer>(*((size_t *)v - 3))</initializer>
        <briefdescription>
<para>Gets the size of v. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to get the size of. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="47" column="9" bodyfile="include/Shroon/Utils/Vector.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Vector_1ga064c00c2c55489b35015b003f39229d6" prot="public" static="no">
        <name>SUTLVectorCapacity</name>
        <param><defname>v</defname></param>
        <initializer>(*((size_t *)v - 2))</initializer>
        <briefdescription>
<para>Gets the capacity of v. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to get the capacity of. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="54" column="9" bodyfile="include/Shroon/Utils/Vector.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Vector_1gabeab74fc632a6cfdb4c07944cb5aa842" prot="public" static="no">
        <name>SUTLVectorNew</name>
        <param><defname>t</defname></param>
        <initializer>((t *)<ref refid="group__Internal_1gad453cf16699f219b8da69eaff9d3705a" kindref="member">SUTL_InternalVectorNew</ref>(sizeof(t)))</initializer>
        <briefdescription>
<para>Creates a new vector of type <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of element which the vector will store.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput>t *</computeroutput> which points to index 0 in the vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="63" column="9" bodyfile="include/Shroon/Utils/Vector.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Vector_1ga279b90bde3ad8670025311d68c9d20b0" prot="public" static="no">
        <name>SUTLVectorFree</name>
        <param><defname>v</defname></param>
        <initializer><ref refid="Common_8h_1a1ef8ab546b7c0782add31a64662a9c87" kindref="member">SHRN_FREE</ref>((size_t *)v - 3)</initializer>
        <briefdescription>
<para>Frees a vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to free. This must be a pointer returned from <computeroutput>SUTLVectorNew</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="70" column="9" bodyfile="include/Shroon/Utils/Vector.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Vector_1gaee3ca7e23b775c3e7e89e66386b49e69" prot="public" static="no">
        <name>SUTLVectorReserve</name>
        <param><defname>v</defname></param>
        <param><defname>size</defname></param>
        <initializer><ref refid="group__Internal_1gac0a546eaa51c0f6c205ef677009fd068" kindref="member">SUTL_InternalVectorReserve</ref>((void **)&amp;v, size)</initializer>
        <briefdescription>
<para>Reserves memory for <computeroutput>size</computeroutput> elements in <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to reserve memory in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements to reserve memory for. Must be greater than or equal to size of <computeroutput>v</computeroutput>, otherwise nothing is changed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="79" column="9" bodyfile="include/Shroon/Utils/Vector.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Vector_1ga9408fda84a35c45b047a7af993a27e7b" prot="public" static="no">
        <name>SUTLVectorResize</name>
        <param><defname>v</defname></param>
        <param><defname>size</defname></param>
        <initializer><ref refid="group__Internal_1ga4152fa4b4c13e98c79aee83286a0df2d" kindref="member">SUTL_InternalVectorResize</ref>((void **)&amp;v, size)</initializer>
        <briefdescription>
<para>Resizes <computeroutput>v</computeroutput> to <computeroutput>size</computeroutput> elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to resize. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size of the vector. Doesn&apos;t affect the capacity of vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="87" column="9" bodyfile="include/Shroon/Utils/Vector.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Vector_1gab397c31e071773ac38692d899ec15024" prot="public" static="no">
        <name>SUTLVectorInsert</name>
        <param><defname>v</defname></param>
        <param><defname>at</defname></param>
        <param><defname>elem</defname></param>
        <initializer><ref refid="group__Internal_1ga7d5a5cdfcfc7eea960d42d40a69b4284" kindref="member">SUTL_InternalVectorInsertN</ref>((void **)&amp;v, at, &amp;elem, 1)</initializer>
        <briefdescription>
<para>Inserts <computeroutput>elem</computeroutput> at index <computeroutput>at</computeroutput> into <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to insert <computeroutput>elem</computeroutput> in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to insert the element at. This will be the index of the new element. Must be less than or equal to the size of <computeroutput>v</computeroutput>, otherwise the insertion fails and <computeroutput>NULL</computeroutput> is returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to insert inside <computeroutput>v</computeroutput>. Must be an lvalue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pointer to the inserted element. If insertion failed, it is <computeroutput>NULL</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="99" column="9" bodyfile="include/Shroon/Utils/Vector.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Vector_1ga5f5a4c0c864fe78a112ca91117c6586d" prot="public" static="no">
        <name>SUTLVectorInsertN</name>
        <param><defname>v</defname></param>
        <param><defname>at</defname></param>
        <param><defname>ptr</defname></param>
        <param><defname>count</defname></param>
        <initializer><ref refid="group__Internal_1ga7d5a5cdfcfc7eea960d42d40a69b4284" kindref="member">SUTL_InternalVectorInsertN</ref>((void **)&amp;v, at, ptr, count)</initializer>
        <briefdescription>
<para>Inserts <computeroutput>count</computeroutput> elements from <computeroutput>ptr</computeroutput> at index <computeroutput>at</computeroutput> into <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to insert <computeroutput>elem</computeroutput> in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to insert the elements at. This will be the index of the first new element. Must be less than or equal to the size of <computeroutput>v</computeroutput>, otherwise the insertion fails and <computeroutput>NULL</computeroutput> is returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the elements which will be inserted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements to insert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pointer to the first inserted element. If insertion failed, it is <computeroutput>NULL</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="113" column="9" bodyfile="include/Shroon/Utils/Vector.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Vector_1ga27045ec866ed199548ef1ead7a4fe142" prot="public" static="no">
        <name>SUTLVectorErase</name>
        <param><defname>v</defname></param>
        <param><defname>at</defname></param>
        <initializer><ref refid="group__Internal_1ga705007f5fb3e4d4ad41a7cdaabede1f0" kindref="member">SUTL_InternalVectorEraseN</ref>((void **)&amp;v, at, 1)</initializer>
        <briefdescription>
<para>Erases element at index <computeroutput>at</computeroutput> in <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to erase element from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of element to erase. Must be less than the size of <computeroutput>v</computeroutput>, otherwise nothing is changed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="122" column="9" bodyfile="include/Shroon/Utils/Vector.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Vector_1ga4c83deb0b4f089f7b8d36a4a668a513d" prot="public" static="no">
        <name>SUTLVectorEraseN</name>
        <param><defname>v</defname></param>
        <param><defname>at</defname></param>
        <param><defname>count</defname></param>
        <initializer><ref refid="group__Internal_1ga705007f5fb3e4d4ad41a7cdaabede1f0" kindref="member">SUTL_InternalVectorEraseN</ref>((void **)&amp;v, at, count)</initializer>
        <briefdescription>
<para>Erases <computeroutput>count</computeroutput> elements starting from <computeroutput>at</computeroutput> in <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to erase element from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of first element to erase. Must be less than <computeroutput>size of v - count</computeroutput>, otherwise nothing is changed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements to erase. Must be less than or equal to size of <computeroutput>v</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="132" column="9" bodyfile="include/Shroon/Utils/Vector.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Vector_1gaaf6809c41fbc904c2de7b3fe59b20acf" prot="public" static="no">
        <name>SUTLVectorPush</name>
        <param><defname>v</defname></param>
        <param><defname>elem</defname></param>
        <initializer><ref refid="group__Vector_1gab397c31e071773ac38692d899ec15024" kindref="member">SUTLVectorInsert</ref>(v, <ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(v), elem)</initializer>
        <briefdescription>
<para>Pushes <computeroutput>elem</computeroutput> at the end of <computeroutput>v</computeroutput>. Synonymous to <computeroutput>SUTLInsert</computeroutput> with <computeroutput>at</computeroutput> as size of <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to push <computeroutput>elem</computeroutput> in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to push to <computeroutput>v</computeroutput>. Must be an lvalue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pointer to the inserted element. If insertion failed, it is <computeroutput>NULL</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="143" column="9" bodyfile="include/Shroon/Utils/Vector.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Vector_1ga5267fe5032e9c8dbe8601b7d7b9bbeb8" prot="public" static="no">
        <name>SUTLVectorPushN</name>
        <param><defname>v</defname></param>
        <param><defname>ptr</defname></param>
        <param><defname>count</defname></param>
        <initializer><ref refid="group__Vector_1ga5f5a4c0c864fe78a112ca91117c6586d" kindref="member">SUTLVectorInsertN</ref>(v, <ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(v), ptr, count)</initializer>
        <briefdescription>
<para>Pushes <computeroutput>count</computeroutput> elements from <computeroutput>ptr</computeroutput> to the end of <computeroutput>v</computeroutput>. Synonymous to <computeroutput>SUTLInsertN</computeroutput> with <computeroutput>at</computeroutput> as size of <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to push <computeroutput>elem</computeroutput> in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the elements which will be inserted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements to push.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pointer to the first inserted element. If insertion failed, it is <computeroutput>NULL</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="155" column="9" bodyfile="include/Shroon/Utils/Vector.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Vector_1gaa8b7538003a48a9378ca41f7ff4d9b99" prot="public" static="no">
        <name>SUTLVectorPop</name>
        <param><defname>v</defname></param>
        <initializer><ref refid="group__Vector_1ga27045ec866ed199548ef1ead7a4fe142" kindref="member">SUTLVectorErase</ref>(v, <ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(v) ? <ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(v) - 1 : 0)</initializer>
        <briefdescription>
<para>Pops element from the back of <computeroutput>v</computeroutput>. Synonymous to SUTLErase with <computeroutput>at</computeroutput> as size of <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to pop element from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="163" column="9" bodyfile="include/Shroon/Utils/Vector.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Vector_1ga9d91ac544f3bb384299364a26bbf4f6e" prot="public" static="no">
        <name>SUTLVectorPopN</name>
        <param><defname>v</defname></param>
        <param><defname>count</defname></param>
        <initializer><ref refid="group__Vector_1ga4c83deb0b4f089f7b8d36a4a668a513d" kindref="member">SUTLVectorEraseN</ref>(v, <ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(v) &gt;= count ? <ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(v) - count : 0, count)</initializer>
        <briefdescription>
<para>Pops <computeroutput>count</computeroutput> elements from the back of <computeroutput>v</computeroutput>. Synonymous to <computeroutput>SUTLEraseN</computeroutput> with <computeroutput>at</computeroutput> as size of <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to pop elements from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements to pop. Must be less than or equal to size of <computeroutput>v</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="172" column="9" bodyfile="include/Shroon/Utils/Vector.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Vector_1gad0919d2db87a1462473463df60118f8e" prot="public" static="no">
        <name>SUTLVectorEach</name>
        <param><defname>t</defname></param>
        <param><defname>v</defname></param>
        <param><defname>name</defname></param>
        <param><defname>expr</defname></param>
        <initializer>    {\
        size_t i = 0;\
        for (i = 0; i &lt; <ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(v); i++)\
        {\
            t * name = v + i;\
            expr\
        }\
    }</initializer>
        <briefdescription>
<para>Executes <computeroutput>expr</computeroutput> for each element of <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of element stored in <computeroutput>v</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to iterate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the variable in which current element will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>The code block to execute for each element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="182" column="9" bodyfile="include/Shroon/Utils/Vector.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__Internal_1gad453cf16699f219b8da69eaff9d3705a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* SUTL_InternalVectorNew</definition>
        <argsstring>(size_t elemsize)</argsstring>
        <name>SUTL_InternalVectorNew</name>
        <param>
          <type>size_t</type>
          <declname>elemsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="199" column="7" declfile="include/Shroon/Utils/Vector.h" declline="199" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__Internal_1gac0a546eaa51c0f6c205ef677009fd068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SUTL_InternalVectorReserve</definition>
        <argsstring>(void **v, size_t size)</argsstring>
        <name>SUTL_InternalVectorReserve</name>
        <param>
          <type>void **</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="200" column="6" declfile="include/Shroon/Utils/Vector.h" declline="200" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Internal_1ga4152fa4b4c13e98c79aee83286a0df2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SUTL_InternalVectorResize</definition>
        <argsstring>(void **v, size_t size)</argsstring>
        <name>SUTL_InternalVectorResize</name>
        <param>
          <type>void **</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="201" column="6" declfile="include/Shroon/Utils/Vector.h" declline="201" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Internal_1ga7d5a5cdfcfc7eea960d42d40a69b4284" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* SUTL_InternalVectorInsertN</definition>
        <argsstring>(void **v, size_t at, const void *ptr, size_t count)</argsstring>
        <name>SUTL_InternalVectorInsertN</name>
        <param>
          <type>void **</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>at</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="202" column="7" declfile="include/Shroon/Utils/Vector.h" declline="202" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__Internal_1ga705007f5fb3e4d4ad41a7cdaabede1f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SUTL_InternalVectorEraseN</definition>
        <argsstring>(void **v, size_t at, size_t count)</argsstring>
        <name>SUTL_InternalVectorEraseN</name>
        <param>
          <type>void **</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>at</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Shroon/Utils/Vector.h" line="203" column="6" declfile="include/Shroon/Utils/Vector.h" declline="203" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2021<sp/>Saroj<sp/>Kumar.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SUTL_VECTOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SUTL_VECTOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Common_8h" kindref="compound">Common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" refkind="member"><highlight class="preprocessor">#define<sp/>SUTLVectorSize(v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*((size_t<sp/>*)v<sp/>-<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="group__Vector_1ga064c00c2c55489b35015b003f39229d6" refkind="member"><highlight class="preprocessor">#define<sp/>SUTLVectorCapacity(v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*((size_t<sp/>*)v<sp/>-<sp/>2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="group__Vector_1gabeab74fc632a6cfdb4c07944cb5aa842" refkind="member"><highlight class="preprocessor">#define<sp/>SUTLVectorNew(t)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((t<sp/>*)SUTL_InternalVectorNew(sizeof(t)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="group__Vector_1ga279b90bde3ad8670025311d68c9d20b0" refkind="member"><highlight class="preprocessor">#define<sp/>SUTLVectorFree(v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHRN_FREE((size_t<sp/>*)v<sp/>-<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="group__Vector_1gaee3ca7e23b775c3e7e89e66386b49e69" refkind="member"><highlight class="preprocessor">#define<sp/>SUTLVectorReserve(v,<sp/>size)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SUTL_InternalVectorReserve((void<sp/>**)&amp;v,<sp/>size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="group__Vector_1ga9408fda84a35c45b047a7af993a27e7b" refkind="member"><highlight class="preprocessor">#define<sp/>SUTLVectorResize(v,<sp/>size)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SUTL_InternalVectorResize((void<sp/>**)&amp;v,<sp/>size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="group__Vector_1gab397c31e071773ac38692d899ec15024" refkind="member"><highlight class="preprocessor">#define<sp/>SUTLVectorInsert(v,<sp/>at,<sp/>elem)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SUTL_InternalVectorInsertN((void<sp/>**)&amp;v,<sp/>at,<sp/>&amp;elem,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="group__Vector_1ga5f5a4c0c864fe78a112ca91117c6586d" refkind="member"><highlight class="preprocessor">#define<sp/>SUTLVectorInsertN(v,<sp/>at,<sp/>ptr,<sp/>count)<sp/><sp/><sp/><sp/>SUTL_InternalVectorInsertN((void<sp/>**)&amp;v,<sp/>at,<sp/>ptr,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="group__Vector_1ga27045ec866ed199548ef1ead7a4fe142" refkind="member"><highlight class="preprocessor">#define<sp/>SUTLVectorErase(v,<sp/>at)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SUTL_InternalVectorEraseN((void<sp/>**)&amp;v,<sp/>at,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="group__Vector_1ga4c83deb0b4f089f7b8d36a4a668a513d" refkind="member"><highlight class="preprocessor">#define<sp/>SUTLVectorEraseN(v,<sp/>at,<sp/>count)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SUTL_InternalVectorEraseN((void<sp/>**)&amp;v,<sp/>at,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="group__Vector_1gaaf6809c41fbc904c2de7b3fe59b20acf" refkind="member"><highlight class="preprocessor">#define<sp/>SUTLVectorPush(v,<sp/>elem)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SUTLVectorInsert(v,<sp/>SUTLVectorSize(v),<sp/>elem)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="group__Vector_1ga5267fe5032e9c8dbe8601b7d7b9bbeb8" refkind="member"><highlight class="preprocessor">#define<sp/>SUTLVectorPushN(v,<sp/>ptr,<sp/>count)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SUTLVectorInsertN(v,<sp/>SUTLVectorSize(v),<sp/>ptr,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="group__Vector_1gaa8b7538003a48a9378ca41f7ff4d9b99" refkind="member"><highlight class="preprocessor">#define<sp/>SUTLVectorPop(v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SUTLVectorErase(v,<sp/>SUTLVectorSize(v)<sp/>?<sp/>SUTLVectorSize(v)<sp/>-<sp/>1<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="group__Vector_1ga9d91ac544f3bb384299364a26bbf4f6e" refkind="member"><highlight class="preprocessor">#define<sp/>SUTLVectorPopN(v,<sp/>count)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SUTLVectorEraseN(v,<sp/>SUTLVectorSize(v)<sp/>&gt;=<sp/>count<sp/>?<sp/>SUTLVectorSize(v)<sp/>-<sp/>count<sp/>:<sp/>0,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="group__Vector_1gad0919d2db87a1462473463df60118f8e" refkind="member"><highlight class="preprocessor">#define<sp/>SUTLVectorEach(t,<sp/>v,<sp/>name,<sp/>expr)<sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>i<sp/>=<sp/>0;\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>SUTLVectorSize(v);<sp/>i++)\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>*<sp/>name<sp/>=<sp/>v<sp/>+<sp/>i;\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="group__Internal_1gad453cf16699f219b8da69eaff9d3705a" kindref="member">SUTL_InternalVectorNew</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elemsize);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Internal_1gac0a546eaa51c0f6c205ef677009fd068" kindref="member">SUTL_InternalVectorReserve</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Internal_1ga4152fa4b4c13e98c79aee83286a0df2d" kindref="member">SUTL_InternalVectorResize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="group__Internal_1ga7d5a5cdfcfc7eea960d42d40a69b4284" kindref="member">SUTL_InternalVectorInsertN</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>at,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Internal_1ga705007f5fb3e4d4ad41a7cdaabede1f0" kindref="member">SUTL_InternalVectorEraseN</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>at,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor">#ifdef<sp/>SUTL_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SUTLVectorElemsize(v)<sp/><sp/><sp/>(*((size_t<sp/>*)v<sp/>-<sp/>1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SUTLVectorOffset(v,<sp/>i)<sp/><sp/>(void<sp/>*)((uint8_t<sp/>*)v<sp/>+<sp/>SUTLVectorElemsize(v)<sp/>*<sp/>(i))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="group__Internal_1gad453cf16699f219b8da69eaff9d3705a" kindref="member">SUTL_InternalVectorNew</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elemsize)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Allocate<sp/>memory<sp/>for<sp/>internal<sp/>variables<sp/>size,<sp/>capacity<sp/>and<sp/>element<sp/>size.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>mem<sp/>=<sp/><ref refid="Common_8h_1a33576da5507268ffc7a5ba094678cdb6" kindref="member">SHRN_MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mem)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ErrorHandler_8h_1a6599a51289085a4b89fa152c0af3d591" kindref="member">SUTLErrorHandler</ref>(</highlight><highlight class="stringliteral">&quot;Memory<sp/>allocation<sp/>failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mem;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Make<sp/>sure<sp/>`mem`<sp/>points<sp/>to<sp/>the<sp/>start<sp/>of<sp/>the<sp/>array<sp/>instead<sp/>of<sp/>internal<sp/>variables.</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*)mem<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Initialize<sp/>the<sp/>internal<sp/>variables.</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(mem)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__Vector_1ga064c00c2c55489b35015b003f39229d6" kindref="member">SUTLVectorCapacity</ref>(mem)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SUTLVectorElemsize(mem)<sp/>=<sp/>elemsize;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mem;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Internal_1gac0a546eaa51c0f6c205ef677009fd068" kindref="member">SUTL_InternalVectorReserve</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Can&apos;t<sp/>reserve<sp/>memory<sp/>less<sp/>than<sp/>the<sp/>memory<sp/>assigned<sp/>to<sp/>elements.<sp/>This<sp/>can<sp/>cause<sp/>loss<sp/>of</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>data.</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>However,<sp/>note<sp/>that<sp/>this<sp/>would<sp/>work<sp/>if<sp/>`size`<sp/>is<sp/>less<sp/>than<sp/>both<sp/>the<sp/>capacity<sp/>and<sp/>the<sp/>size</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>the<sp/>vector.<sp/>This<sp/>allows<sp/>the<sp/>extra<sp/>memory<sp/>to<sp/>be<sp/>shrunk<sp/>down<sp/>to<sp/>the<sp/>size<sp/>of<sp/>the<sp/>used</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>memory.</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;<sp/><ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(*v))</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ErrorHandler_8h_1a6599a51289085a4b89fa152c0af3d591" kindref="member">SUTLErrorHandler</ref>(</highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>reserve<sp/>memory<sp/>less<sp/>than<sp/>the<sp/>amount<sp/>of<sp/>memory<sp/>already<sp/>in<sp/>use.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>requiredSize<sp/>=</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(size_t)<sp/>*<sp/>3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>variables<sp/>size,<sp/>capacity<sp/>and<sp/>element<sp/>size.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>size<sp/>*<sp/>SUTLVectorElemsize(*v)<sp/></highlight><highlight class="comment">/*<sp/>For<sp/>elements<sp/>allocated<sp/>in<sp/>the<sp/>vector.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Resize<sp/>the<sp/>memory<sp/>of<sp/>vector<sp/>(including<sp/>the<sp/>internal<sp/>variables)<sp/>to<sp/>the<sp/>`requiredSize`.</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*v<sp/>=<sp/><ref refid="Common_8h_1a767f8b1c61fe2f764635d060bd206fad" kindref="member">SHRN_REALLOC</ref>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*)*v<sp/>-<sp/>3,<sp/>requiredSize);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*v)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ErrorHandler_8h_1a6599a51289085a4b89fa152c0af3d591" kindref="member">SUTLErrorHandler</ref>(</highlight><highlight class="stringliteral">&quot;Memory<sp/>reallocation<sp/>failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Make<sp/>sure<sp/>`v`<sp/>points<sp/>to<sp/>the<sp/>start<sp/>of<sp/>the<sp/>array<sp/>instead<sp/>of<sp/>internal<sp/>variables.:</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*v<sp/>=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*)*v<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__Vector_1ga064c00c2c55489b35015b003f39229d6" kindref="member">SUTLVectorCapacity</ref>(*v)<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Internal_1ga4152fa4b4c13e98c79aee83286a0df2d" kindref="member">SUTL_InternalVectorResize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Reserve<sp/>memory<sp/>only<sp/>if<sp/>current<sp/>memory<sp/>is<sp/>not<sp/>more<sp/>than<sp/>required<sp/>memory.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(*v)<sp/>&lt;<sp/>size)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__Vector_1ga064c00c2c55489b35015b003f39229d6" kindref="member">SUTLVectorCapacity</ref>(*v)<sp/>&lt;<sp/>size)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>now,<sp/>it<sp/>reserves<sp/>size<sp/>for<sp/>2<sp/>extra<sp/>elements.</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>behaviour<sp/>might<sp/>change<sp/>later.</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__Internal_1gac0a546eaa51c0f6c205ef677009fd068" kindref="member">SUTL_InternalVectorReserve</ref>(v,<sp/>size<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Change<sp/>the<sp/>size<sp/>anyway.</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>current<sp/>size<sp/>is<sp/>less<sp/>than<sp/>required<sp/>size<sp/>than<sp/>uninitialized<sp/>elements<sp/>are<sp/>added.</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>current<sp/>size<sp/>is<sp/>same<sp/>as<sp/>required<sp/>size<sp/>than<sp/>nothing<sp/>happens.</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>current<sp/>size<sp/>is<sp/>greater<sp/>than<sp/>required<sp/>size<sp/>than<sp/>extra<sp/>elements<sp/>become<sp/>&quot;free<sp/>space&quot;.</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(*v)<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="group__Internal_1ga7d5a5cdfcfc7eea960d42d40a69b4284" kindref="member">SUTL_InternalVectorInsertN</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>at,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>`at`<sp/>becomes<sp/>the<sp/>index<sp/>of<sp/>the<sp/>first<sp/>added<sp/>element<sp/>hence<sp/>it<sp/>must<sp/>be<sp/>less<sp/>than<sp/>or<sp/>equal<sp/>to</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>original<sp/>size<sp/>of<sp/>vector.</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(at<sp/>&gt;<sp/><ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(*v))</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ErrorHandler_8h_1a6599a51289085a4b89fa152c0af3d591" kindref="member">SUTLErrorHandler</ref>(</highlight><highlight class="stringliteral">&quot;Insert<sp/>index<sp/>must<sp/>be<sp/>less<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>size.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>originalSize<sp/>=<sp/><ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(*v);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Resize<sp/>the<sp/>vector<sp/>to<sp/>the<sp/>sum<sp/>of<sp/>current<sp/>size<sp/>and<sp/>count.<sp/>From<sp/>here,<sp/>the<sp/>size<sp/>of<sp/>vector</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>is<sp/>the<sp/>new<sp/>size.</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__Internal_1ga4152fa4b4c13e98c79aee83286a0df2d" kindref="member">SUTL_InternalVectorResize</ref>(v,<sp/>originalSize<sp/>+<sp/>count);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>No<sp/>need<sp/>to<sp/>shift<sp/>elements<sp/>if<sp/>`at`<sp/>is<sp/>the<sp/>end<sp/>of<sp/>vector.</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(at<sp/>!=<sp/>originalSize)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Shift<sp/>elements<sp/>from<sp/>`at`<sp/>to<sp/>the<sp/>right<sp/>by<sp/>`count`<sp/>to<sp/>make<sp/>space<sp/>for<sp/>the<sp/>new<sp/>element.</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Common_8h_1a4ce05443b27a360cf8f168b7d720570a" kindref="member">SHRN_MEMMOVE</ref>(</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SUTLVectorOffset(*v,<sp/>at<sp/>+<sp/>count),</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SUTLVectorOffset(*v,<sp/>at),</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(originalSize<sp/>-<sp/>at)<sp/>*<sp/>SUTLVectorElemsize(*v)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Set<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>inserted<sp/>elements<sp/>to<sp/>be<sp/>the<sp/>contents<sp/>at<sp/>`ptr`<sp/>and<sp/>return<sp/>the</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>pointer<sp/>to<sp/>the<sp/>first<sp/>inserted<sp/>element.</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="Common_8h_1ae98701da6883fb9a22e5c13a1bf87cfb" kindref="member">SHRN_MEMCPY</ref>(SUTLVectorOffset(*v,<sp/>at),<sp/>ptr,<sp/>SUTLVectorElemsize(*v)<sp/>*<sp/>count);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Internal_1ga705007f5fb3e4d4ad41a7cdaabede1f0" kindref="member">SUTL_InternalVectorEraseN</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>at,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>There<sp/>must<sp/>be<sp/>`count`<sp/>elements<sp/>available<sp/>from<sp/>index<sp/>`at`.</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(at<sp/>+<sp/>count<sp/>&gt;<sp/><ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(*v))</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((at<sp/>&gt;<sp/><ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(*v)))</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ErrorHandler_8h_1a6599a51289085a4b89fa152c0af3d591" kindref="member">SUTLErrorHandler</ref>(</highlight><highlight class="stringliteral">&quot;Elements<sp/>requested<sp/>to<sp/>be<sp/>erased<sp/>don&apos;t<sp/>exist.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/><ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(*v)<sp/>-<sp/>at;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>No<sp/>need<sp/>to<sp/>shift<sp/>elements<sp/>if<sp/>the<sp/>elements<sp/>to<sp/>be<sp/>removed<sp/>are<sp/>at<sp/>the<sp/>end<sp/>of<sp/>vector.</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(at<sp/>+<sp/>count<sp/>!=<sp/><ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(*v))</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Shift<sp/>elements<sp/>from<sp/>`at`<sp/>to<sp/>the<sp/>left<sp/>by<sp/>`count`<sp/>to<sp/>overwrite<sp/>the<sp/>elements<sp/>to<sp/>erase</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>with<sp/>the<sp/>data<sp/>of<sp/>elements<sp/>after<sp/>it.</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Common_8h_1a4ce05443b27a360cf8f168b7d720570a" kindref="member">SHRN_MEMMOVE</ref>(</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SUTLVectorOffset(*v,<sp/>at),</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SUTLVectorOffset(*v,<sp/>at<sp/>+<sp/>count),</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(*v)<sp/>-<sp/>count<sp/>-<sp/>at)<sp/>*<sp/>SUTLVectorElemsize(*v)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Common_8h_1a5c367cdceb0b1a52f2208e78a1f4efa2" kindref="member">SHRN_MEMSET</ref>(</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SUTLVectorOffset(*v,<sp/><ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(*v)<sp/>-<sp/>count),</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SUTLVectorElemsize(*v)<sp/>*<sp/>count</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__Vector_1gaa3cc5bdcc6ded013a2ff14cb60baa8af" kindref="member">SUTLVectorSize</ref>(*v)<sp/>-=<sp/>count;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>SUTLVectorOffset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>SUTLVectorElemsize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="include/Shroon/Utils/Vector.h"/>
  </compounddef>
</doxygen>
